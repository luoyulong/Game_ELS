/*
 *  GEStateLogIn.cpp
 *  Dice
 *
 *  Created by F.K. on 12-4-26.
 *  Copyright 2012 __GameSnow_. All rights reserved.
 *
 */
#include "GameStateLogIn.h"
#include "GameStateShortConnect.h"
#include "GlobalData.h"
#include "warningMessageWrapper.h"
#include "RoomWrapper.h"
#include "WrapperSet.h"
#include "SNSWrapper.h"
#include "GameCenterwrapper.h"

static int buttonLocation[9][2] = {
    {720, 160}, //0sina account
    {720, 260}, //1tourist account
    {720, 460}, //2local play
    {650, 560}, //3help
    {790, 560},  //4set
    {960, 160}, //QQ登录
    {960, 160}, //人人登录
    {960, 160}, //新浪微博登录
    {960, 160} //game center 登录
};

GameStateLogIn::GameStateLogIn()
{
    //GEDirector::GetInstance()->setTargetAndSelectorInBackground(this, callfunc_selector(GameStateLogIn::testSubThread));
    
    
    GEScene* pScene = GEDirector::GetInstance()->createScene("StateLogIn");
    pScene->addChild(this);
    printf("StateLogIn is:%p\n",pScene);
    
    // background
    m_pBackGround = new GEImage();
    m_pBackGround->setImage("login_back.png");
    m_pBackGround->setPosition(480, 320);
    this->addChild(m_pBackGround);
    
    // meinv
    m_pIndexMeinv = new GEImage();
    m_pIndexMeinv->setImage("index_meinv.png");
    m_pIndexMeinv->setPosition(280, 320);
    this->addChild(m_pIndexMeinv);
    
    // new menu
    GEMenu* pMenu = GEMenu::menuWithButton(NULL);
    pScene->addChild(pMenu);
    
    // buttons
    char buttonName[18][64]={
        "login_snsbtn.png", "login_snsbtn.png", 
        "login_snsbtn.png", "login_snsbtn.png", 
        "login_singlebtn.png", "login_singlebtn.png", 
        "login_helpbtn.png", "login_helpbtn.png", 
        "login_setbtn.png", "login_setbtn.png",
        "login_helpbtn.png", "login_helpbtn.png",
        "login_helpbtn.png", "login_helpbtn.png",
        "login_helpbtn.png", "login_helpbtn.png",
        "login_helpbtn.png", "login_helpbtn.png"
    };
    for (int i=0; i<9; i++) {
        m_pButtons[i] = GEButton::buttonFromImagesWithTarget(buttonName[2*i+0], 
                                                             buttonName[2*i+1], 
                                                             NULL, 
                                                             this, 
                                                             menu_selector(GameStateLogIn::buttonCallback));
        m_pButtons[i]->setPosition(buttonLocation[i][0], buttonLocation[i][1]);
        //m_pButtons[i]->setScaleX(0.3f);
        pMenu->addButton(m_pButtons[i]);
    }
    
    m_pCountDown = new PlayLayerUnderHead();
    pScene->addChild(m_pCountDown);
    
    m_pEaseSNSBtShow = new GEEaseNumber();
    m_pEaseSNSBtShow->setEaseType(linearEaseIn);
    m_pEaseSNSBtShow->setSingleCycleDuration(0.3);
    m_pEaseSNSBtShow->setTargetAndCallBacks(this, 
                                            schedule_selector(GameStateLogIn::easeSNSBtShowCallbackStart),
                                            schedule_selector(GameStateLogIn::easeSNSBtShowCallback),
                                            schedule_selector(GameStateLogIn::easeSNSBtShowCallback),
                                            NULL);
}

GameStateLogIn::~GameStateLogIn()
{
    
}


void GameStateLogIn::buttonCallback(GEObject* pObj)
{
    for (int i=0; i<9; i++) {
        if (pObj==m_pButtons[i]) {
            switch (i) {
                case 0:
                    easeSNSBtShow();
                    break;
                    
                case 1:
                    //tourist account
                    printf("device id:%s type:%s\n", GetUniqueDeviceIdentifier(), GetDeviceType());
                    sprintf(g_config["login_type"], "guest");
                    
                    if (checkNetWork()) {
                        GameStateWaiting::GetInstance()->SetWaitType(1);
                        if (strcmp(g_config["guest_nick"], "&&^^_null")==0) {
                            sprintf(g_user.name, "%s Player", GetDeviceType());
                            sprintf(g_config["guest_nick"], "%s", g_user.name);
                        } else {
                            sprintf(g_user.name, "%s", g_config["guest_nick"]);
                        }
                        
                        FileConfigure *fileConfigure = new FileConfigure();
                        fileConfigure->WriteOption();
                        free(fileConfigure);
                        
                        GEDirector::GetInstance()->setCurrentScene("GameStateWaiting");
                        GameStateShortConnect::GetInstance()->logInFromTourist(GetUniqueDeviceIdentifier(), g_user.name);
                    }
                    break;
                    
                case 2:
                    //local play
                    break;
                    
                case 3:
                    //help
                    break;
                    
                case 4:
                    //set
                    menuLayerShowSet();
                    break;
                case 5:
                    //qq登录
                    printf("qq登录\n");
                    if (checkNetWork()) {
                        GameStateWaiting::GetInstance()->SetWaitType(1);
                        qqLogin();
                    }
                    break;
                case 6:
                    //新浪微博登录
                    printf("新浪微博登录\n");
                    if (checkNetWork()) {
                        GameStateWaiting::GetInstance()->SetWaitType(1);
                        sinaWeiBoLogin();
                    }
                    break;
                case 7:
                    printf("人人帐号登录\n");
                    //人人帐号登录
                    if (checkNetWork()) {
                        GameStateWaiting::GetInstance()->SetWaitType(1);
                        renrenLogin();
                    }
                    break;
                case 8:
                    //game center 登录
                    CheckGameCenter();
                    GEDirector::GetInstance()->setCurrentScene("GameStateWaiting");
                    GameStateWaiting::GetInstance()->SetWaitType(1);
                    break;
            }
            return;
        }
    }
}

void GameStateLogIn::easeSNSBtShow()
{
    m_pEaseSNSBtShow->reset();
    m_pEaseSNSBtShow->resume();
}

void GameStateLogIn::easeSNSBtShowCallbackStart(float ratio)
{
}

void GameStateLogIn::easeSNSBtShowCallback(float ratio)
{
    if (ratio<0.625)
    {
        m_pButtons[5]->setPosition(960.0 - 800.0*ratio, buttonLocation[5][1]);
    }
    else {
        m_pButtons[5]->setPosition(960.0 - 800.0*0.625, buttonLocation[5][1]);
    }
    
    if (ratio>0.125 && ratio<0.75)
    {
        m_pButtons[6]->setPosition(960.0 - 600.0*(ratio-0.125), buttonLocation[6][1]);
    }
    else {
        if(ratio>=0.75)
            m_pButtons[6]->setPosition(960.0 - 600.0*0.625, buttonLocation[6][1]);
    }
    
    if (ratio>0.25 && ratio<0.875)
    {
        m_pButtons[7]->setPosition(960.0 - 400.0*(ratio-0.25), buttonLocation[7][1]);
    }
    else {
        if (ratio>=0.875) {
            m_pButtons[7]->setPosition(960.0 - 400.0*0.625, buttonLocation[7][1]);
        }
    }
    
    if (ratio>0.375)
    {
        m_pButtons[8]->setPosition(960.0 - 200.0*(ratio-0.375), buttonLocation[8][1]);
    }
    else {
        if (ratio>=1) {
            m_pButtons[8]->setPosition(960.0 - 200.0*0.625, buttonLocation[8][1]);
        }
    }
}

void GameStateLogIn::testSubThread()
{
    for (int i=0; i<100; i++) {
        printf("print in sunthread.\n");
    }
}




